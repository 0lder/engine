cc3d.extend(cc3d, function () {
    var id = 0;

    /**
     * @name cc3d.Material
     * @class A material determines how a particular mesh instance is rendered. It specifies the shader and render state that is
     * set before the mesh instance is submitted to the graphics device.
     * @description Create a new Material instance
     * @property {Number} alphaTest The alpha test reference value to control which fragements are written to the currently
     * active render target based on alpha value. All fragments with an alpha value of less than the alphaTest reference value
     * will be discarded. alphaTest defaults to 0 (all fragments pass).
     * @property {Boolean} alphaWrite If true, the alpha component of fragments generated by the shader of this material is written to
     * the color buffer of the currently active render target. If false, the alpha component will not be written. Defaults to true.
     * @property {Number} blendType Controls how primitives are blended when being written to the currently active render target.
     * Can be one of the following values:
     * <ul>
     * <li>{@link cc3d.BLEND_SUBTRACTIVE}: Subtract the color of the source fragment from the destination fragment and write the result to the frame buffer.</li>
     * <li>{@link cc3d.BLEND_ADDITIVE}: Add the color of the source fragment to the destination fragment and write the result to the frame buffer.</li>
     * <li>{@link cc3d.BLEND_NORMAL}: Enable simple translucency for materials such as glass. This is equivalent to enabling a source blend mode of cc3d.BLENDMODE_SRC_ALPHA and a destination blend mode of cc3d.BLENDMODE_ONE_MINUS_SRC_ALPHA.</li>
     * <li>{@link cc3d.BLEND_NONE}: Disable blending.</li>
     * <li>{@link cc3d.BLEND_PREMULTIPLIED}: Similar to cc3d.BLEND_NORMAL expect the source fragment is assumed to have already been multiplied by the source alpha value.</li>
     * <li>{@link cc3d.BLEND_MULTIPLICATIVE}: Multiply the color of the source fragment by the color of the destination fragment and write the result to the frame buffer.</li>
     * <li>{@link cc3d.BLEND_ADDITIVEALPHA}: Same as cc3d.BLEND_ADDITIVE except the source RGB is multiplied by the source alpha.</li>
     * </ul>
     * Defaults to cc3d.BLEND_NONE.
     * @property {Boolean} blueWrite If true, the blue component of fragments generated by the shader of this material is written to
     * the color buffer of the currently active render target. If false, the blue component will not be written. Defaults to true.
     * @property {Number} cull Controls how triangles are culled based on their face direction with respect to the viewpoint.
     * Can be one of the following values:
     * <ul>
     * <li>{@link cc3d.CULLFACE_NONE}: Do not cull triangles based on face direction.</li>
     * <li>{@link cc3d.CULLFACE_BACK}: Cull the back faces of triangles (do not render triangles facing away from the view point).</li>
     * <li>{@link cc3d.CULLFACE_FRONT}: Cull the front faces of triangles (do not render triangles facing towards the view point).</li>
     * <li>{@link cc3d.CULLFACE_FRONTANDBACK}: Cull both front and back faces (triangles will not be rendered).</li>
     * </ul>
     * Defaults to cc3d.CULLFACE_BACK.
     * @property {Boolean} depthTest If true, fragments generated by the shader of this material are only written to the
     * current render target if they pass the depth test. If false, fragments generated by the shader of this material are
     * written to the current render target regardless of what is in the depth buffer. Defaults to true.
     * @property {Boolean} depthWrite If true, fragments generated by the shader of this material write a depth value to
     * the depth buffer of the currently active render target. If false, no depth value is written. Defaults to true.
     * @property {Boolean} greenWrite If true, the green component of fragments generated by the shader of this material is written to
     * the color buffer of the currently active render target. If false, the green component will not be written. Defaults to true.
     * @property {String} name The name of the material.
     * @property {Boolean} redWrite If true, the red component of fragments generated by the shader of this material is written to
     * the color buffer of the currently active render target. If false, the red component will not be written. Defaults to true.
     * @property {cc3d.Shader} shader The shader used by this material to render mesh instances.
     * @property {cc3d.StencilParameters} stencilFront Stencil parameters for front faces (default is null).
     * @property {cc3d.StencilParameters} stencilBack Stencil parameters for back faces (default is null).
     * @author Will Eastcott and Arthur Rahteenko
     */
    var Material = function Material() {
        this.name = "Untitled";
        this.id = id++;
        this.shader = null;
        this.variants = {};

        this.parameters = {};

        // Render states
        this.alphaTest = 0;

        this.blend = false;
        this.blendSrc = cc3d.BLENDMODE_ONE;
        this.blendDst = cc3d.BLENDMODE_ZERO;
        this.blendEquation = cc3d.BLENDEQUATION_ADD;

        this.cull = cc3d.CULLFACE_BACK;

        this.depthTest = true;
        this.depthWrite = true;
        this.stencilFront = null;
        this.stencilBack = null;

        this.redWrite = true;
        this.greenWrite = true;
        this.blueWrite = true;
        this.alphaWrite = true;

        this.meshInstances = []; // The mesh instances referencing this material
    };

    Object.defineProperty(Material.prototype, 'blendType', {
        get: function () {
            if ((!this.blend) &&
                (this.blendSrc === cc3d.BLENDMODE_ONE) &&
                (this.blendDst === cc3d.BLENDMODE_ZERO) &&
                (this.blendEquation === cc3d.BLENDEQUATION_ADD)) {
                return cc3d.BLEND_NONE;
            } else if ((this.blend) &&
                (this.blendSrc === cc3d.BLENDMODE_SRC_ALPHA) &&
                (this.blendDst === cc3d.BLENDMODE_ONE_MINUS_SRC_ALPHA) &&
                (this.blendEquation === cc3d.BLENDEQUATION_ADD)) {
                return cc3d.BLEND_NORMAL;
            } else if ((this.blend) &&
                (this.blendSrc === cc3d.BLENDMODE_ONE) &&
                (this.blendDst === cc3d.BLENDMODE_ONE) &&
                (this.blendEquation === cc3d.BLENDEQUATION_ADD)) {
                return cc3d.BLEND_ADDITIVE;
            } else if ((this.blend) &&
                (this.blendSrc === cc3d.BLENDMODE_SRC_ALPHA) &&
                (this.blendDst === cc3d.BLENDMODE_ONE) &&
                (this.blendEquation === cc3d.BLENDEQUATION_ADD)) {
                return cc3d.BLEND_ADDITIVEALPHA;
            } else if ((this.blend) &&
                (this.blendSrc === cc3d.BLENDMODE_DST_COLOR) &&
                (this.blendDst === cc3d.BLENDMODE_SRC_COLOR) &&
                (this.blendEquation === cc3d.BLENDEQUATION_ADD)) {
                return cc3d.BLEND_MULTIPLICATIVE2X;
            } else if ((this.blend) &&
                (this.blendSrc === cc3d.BLENDMODE_ONE_MINUS_DST_COLOR) &&
                (this.blendDst === cc3d.BLENDMODE_ONE) &&
                (this.blendEquation === cc3d.BLENDEQUATION_ADD)) {
                return cc3d.BLEND_SCREEN;
            } else if ((this.blend) &&
                (this.blendSrc === cc3d.BLENDMODE_DST_COLOR) &&
                (this.blendDst === cc3d.BLENDMODE_ZERO) &&
                (this.blendEquation === cc3d.BLENDEQUATION_ADD)) {
                return cc3d.BLEND_MULTIPLICATIVE;
            } else if ((this.blend) &&
                (this.blendSrc === cc3d.BLENDMODE_ONE) &&
                (this.blendDst === cc3d.BLENDMODE_ONE_MINUS_SRC_ALPHA) &&
                (this.blendEquation === cc3d.BLENDEQUATION_ADD)) {
                return cc3d.BLEND_PREMULTIPLIED;
            } else {
                return cc3d.BLEND_NORMAL;
            }
        },
        set: function (type) {
            switch (type) {
                case cc3d.BLEND_NONE:
                    this.blend = false;
                    this.blendSrc = cc3d.BLENDMODE_ONE;
                    this.blendDst = cc3d.BLENDMODE_ZERO;
                    this.blendEquation = cc3d.BLENDEQUATION_ADD;
                    break;
                case cc3d.BLEND_NORMAL:
                    this.blend = true;
                    this.blendSrc = cc3d.BLENDMODE_SRC_ALPHA;
                    this.blendDst = cc3d.BLENDMODE_ONE_MINUS_SRC_ALPHA;
                    this.blendEquation = cc3d.BLENDEQUATION_ADD;
                    break;
                case cc3d.BLEND_PREMULTIPLIED:
                    this.blend = true;
                    this.blendSrc = cc3d.BLENDMODE_ONE;
                    this.blendDst = cc3d.BLENDMODE_ONE_MINUS_SRC_ALPHA;
                    this.blendEquation = cc3d.BLENDEQUATION_ADD;
                    break;
                case cc3d.BLEND_ADDITIVE:
                    this.blend = true;
                    this.blendSrc = cc3d.BLENDMODE_ONE;
                    this.blendDst = cc3d.BLENDMODE_ONE;
                    this.blendEquation = cc3d.BLENDEQUATION_ADD;
                    break;
                case cc3d.BLEND_ADDITIVEALPHA:
                    this.blend = true;
                    this.blendSrc = cc3d.BLENDMODE_SRC_ALPHA;
                    this.blendDst = cc3d.BLENDMODE_ONE;
                    this.blendEquation = cc3d.BLENDEQUATION_ADD;
                    break;
                case cc3d.BLEND_MULTIPLICATIVE2X:
                    this.blend = true;
                    this.blendSrc = cc3d.BLENDMODE_DST_COLOR;
                    this.blendDst = cc3d.BLENDMODE_SRC_COLOR;
                    this.blendEquation = cc3d.BLENDEQUATION_ADD;
                    break;
                case cc3d.BLEND_SCREEN:
                    this.blend = true;
                    this.blendSrc = cc3d.BLENDMODE_ONE_MINUS_DST_COLOR;
                    this.blendDst = cc3d.BLENDMODE_ONE;
                    this.blendEquation = cc3d.BLENDEQUATION_ADD;
                    break;
                case cc3d.BLEND_MULTIPLICATIVE:
                    this.blend = true;
                    this.blendSrc = cc3d.BLENDMODE_DST_COLOR;
                    this.blendDst = cc3d.BLENDMODE_ZERO;
                    this.blendEquation = cc3d.BLENDEQUATION_ADD;
                    break;
            }
            this._updateMeshInstanceKeys();
        }
    });

    Material.prototype._cloneInternal = function (clone) {
        clone.name = this.name;
        clone.id = id++;
        clone.variants = {}; // ?
        clone.shader = this.shader;
        clone.parameters = {};

        // and need copy parameters of that shader
        for (var parameterName in this.parameters) {
            if (this.parameters.hasOwnProperty(parameterName))
                clone.parameters[parameterName] = {scopeId: null, data: this.parameters[parameterName].data};
        }

        // Render states
        clone.alphaTest = this.alphaTest;

        clone.blend = this.blend;
        clone.blendSrc = this.blendSrc;
        clone.blendDst = this.blendDst;
        clone.blendEquation = this.blendEquation;

        clone.cull = this.cull;

        clone.depthTest = this.depthTest;
        clone.depthWrite = this.depthWrite;
        if (this.stencilFront) clone.stencilFront = this.stencilFront.clone();
        if (this.stencilBack) {
            if (this.stencilFront === this.stencilBack) {
                clone.stencilBack = clone.stencilFront;
            } else {
                clone.stencilBack = this.stencilBack.clone();
            }
        }

        clone.redWrite = this.redWrite;
        clone.greenWrite = this.greenWrite;
        clone.blueWrite = this.blueWrite;
        clone.alphaWrite = this.alphaWrite;

        clone.meshInstances = [];
    };

    Material.prototype.clone = function () {
        var clone = new cc3d.Material();
        this._cloneInternal(clone);
        return clone;
    };

    Material.prototype._updateMeshInstanceKeys = function () {
        var i, meshInstances = this.meshInstances;
        for (i = 0; i < meshInstances.length; i++) {
            meshInstances[i].updateKey();
        }
    };

    Material.prototype.updateShader = function (device, scene, objDefs) {
        // For vanilla materials, the shader can only be set by the user
    };

    // Parameter management
    Material.prototype.clearParameters = function () {
        this.parameters = {};
    };

    Material.prototype.getParameters = function () {
        return this.parameters;
    };

    Material.prototype.clearVariants = function () {
        var meshInstance;
        this.variants = {};
        var j;
        for (var i = 0; i < this.meshInstances.length; i++) {
            meshInstance = this.meshInstances[i];
            for (j = 0; j < meshInstance._shader.length; j++) {
                meshInstance._shader[j] = null;
            }
        }
    };

    /**
     * @function
     * @name cc3d.Material#getParameter
     * @description Retrieves the specified shader parameter from a material.
     * @param {String} name The name of the parameter to query.
     * @returns {Object} The named parameter.
     * @author Will Eastcott
     */
    Material.prototype.getParameter = function (name) {
        return this.parameters[name];
    };

    /**
     * @function
     * @name cc3d.Material#setParameter
     * @description Sets a shader parameter on a material.
     * @param {String} name The name of the parameter to set.
     * @param {Number|Array|cc3d.Texture} data The value for the specified parameter.
     * @author Will Eastcott
     */
    Material.prototype.setParameter = function (arg, data) {

        var name;
        if (data === undefined) {
            var uniformObject = arg;
            if (uniformObject.length) {
                for (var i = 0; i < uniformObject.length; i++) this.setParameter(uniformObject[i]);
                return;
            } else {
                name = uniformObject.name;
                data = uniformObject.value;
            }
        } else {
            name = arg;
        }

        var param = this.parameters[name];
        if (param) {
            param.data = data;
        } else {
            this.parameters[name] = {
                scopeId: null,
                data: data
            };
        }
    };

    /**
     * @function
     * @name cc3d.Material#deleteParameter
     * @description Deletes a shader parameter on a material.
     * @param {String} name The name of the parameter to delete.
     * @author Will Eastcott
     */
    Material.prototype.deleteParameter = function (name) {
        if (this.parameters[name]) {
            delete this.parameters[name];
        }
    };

    /**
     * @function
     * @name cc3d.Material#setParameters
     * @description Pushes all material parameters into scope.
     * @author Will Eastcott
     */
    Material.prototype.setParameters = function () {
        // Push each shader parameter into scope
        for (var paramName in this.parameters) {
            var parameter = this.parameters[paramName];
            // TODO: Fix https://github.com/playcanvas/engine/issues/597
            //if (!parameter.scopeId) {
            //    parameter.scopeId = device.scope.resolve(paramName);
            //}
            parameter.scopeId.setValue(parameter.data);
        }
    };

    /**
     * @function
     * @name cc3d.Material#update
     * @description Applies any changes made to the material's properties.
     */
    Material.prototype.update = function () {
        throw Error("Not Implemented in base class");
    };

    /**
     * @function
     * @description Initializes the material with the properties in the specified data.
     * @name cc3d.Material#init
     * @param {Object} data The initial data for the material.
     */
    Material.prototype.init = function (data) {
        throw Error("Not Implemented in base class");
    };

    ////////////////
    // DEPRECATED //
    ////////////////
    /**
     * @private
     * @function
     * @name cc3d.Material#getName
     * @description Returns the string name of the specified material. This name is not
     * necessarily unique. Material names set by an artist within the modelling application
     * should be preserved in the PlayCanvas runtime.
     * @return {String} The name of the material.
     * @author Will Eastcott
     */
    Material.prototype.getName = function () {
        return this.name;
    };

    /**
     * @private
     * @function
     * @name cc3d.Material#setName
     * @description Sets the string name of the specified material. This name does not
     * have to be unique.
     * @param {String} name The name of the material.
     * @author Will Eastcott
     */
    Material.prototype.setName = function (name) {
        this.name = name;
    };

    /**
     * @private
     * @function
     * @name cc3d.Material#getShader
     * @description Retrieves the shader assigned to the specified material.
     * @returns {cc3d.Shader} The shader assigned to the material.
     * @author Will Eastcott
     */
    Material.prototype.getShader = function () {
        return this.shader;
    };

    /**
     * @private
     * @function
     * @name cc3d.Material#setShader
     * @description Assigns a shader to the specified material.
     * @param {cc3d.Shader} shader The shader to assign to the material.
     * @author Will Eastcott
     */
    Material.prototype.setShader = function (shader) {
        this.shader = shader;
    };

    /**
     * @name cc3d.StencilParameters
     * @class Holds stencil test settings
     * @description Create a new StencilParameters instance
     * @property {Number} func Sets stencil test function. See cc3d.GraphicsDevice#setStencilFunc
     * @property {Number} ref Sets stencil test reference value. See cc3d.GraphicsDevice#setStencilFunc
     * @property {Number} mask Sets stencil test reading mask. See cc3d.GraphicsDevice#setStencilFunc
     * @property {Number} fail Sets operation to perform if stencil test is failed. See cc3d.GraphicsDevice#setStencilOperation
     * @property {Number} zfail Sets operation to perform if depth test is failed. See cc3d.GraphicsDevice#setStencilOperation
     * @property {Number} zpass Sets operation to perform if both stencil and depth test are passed. See cc3d.GraphicsDevice#setStencilOperation
     */
    var StencilParameters = function (options) {
        this.func = options.func || cc3d.FUNC_ALWAYS;
        this.ref = options.ref || 0;
        this.mask = options.mask || 0xFF;

        this.fail = options.fail || cc3d.STENCILOP_KEEP;
        this.zfail = options.zfail || cc3d.STENCILOP_KEEP;
        this.zpass = options.zpass || cc3d.STENCILOP_KEEP;
    };

    StencilParameters.prototype.clone = function () {
        var clone = new cc3d.StencilParameters({
            func: this.func,
            ref: this.ref,
            mask: this.mask,
            fail: this.fail,
            zfail: this.zfail,
            zpass: this.zpass
        });
        return clone;
    };

    return {
        Material: Material,
        StencilParameters: StencilParameters
    };
}());
